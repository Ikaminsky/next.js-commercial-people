{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const SET_LIBRARY_DATA = 'SET_LIBRARY_DATA';\nexport function setLibraryData(data) {\n  let payload = [].concat(data.books, data.magazines).map(item => {\n    let authors = item.authors.split(',').map(authorMail => {\n      let currentAuthorsData = {};\n\n      for (let i = 0; i < data.authors.length; i++) {\n        if (data.authors[i].email === authorMail) {\n          currentAuthorsData = data.authors[i];\n          break;\n        }\n      }\n\n      return currentAuthorsData;\n    });\n    item.additionalData = item.description || item.publishedAt;\n    delete item.description;\n    delete item.publishedAt;\n    return _objectSpread(_objectSpread({}, item), {}, {\n      authors\n    });\n  });\n  return {\n    type: SET_LIBRARY_DATA,\n    payload\n  };\n}","map":{"version":3,"sources":["D:/Work/Andersen/Test/frontend_test_ik-master/src/actions/library.js"],"names":["SET_LIBRARY_DATA","setLibraryData","data","payload","concat","books","magazines","map","item","authors","split","authorMail","currentAuthorsData","i","length","email","additionalData","description","publishedAt","type"],"mappings":";;;;;;AAAA,OAAO,MAAMA,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,SAASC,cAAT,CAAyBC,IAAzB,EAA+B;AACpC,MAAIC,OAAO,GAAG,GAAGC,MAAH,CAAUF,IAAI,CAACG,KAAf,EAAsBH,IAAI,CAACI,SAA3B,EAAsCC,GAAtC,CAA2CC,IAAD,IAAU;AAChE,QAAIC,OAAO,GAAGD,IAAI,CAACC,OAAL,CAAaC,KAAb,CAAmB,GAAnB,EAAwBH,GAAxB,CAA6BI,UAAD,IAAgB;AACxD,UAAIC,kBAAkB,GAAG,EAAzB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,IAAI,CAACO,OAAL,CAAaK,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,YAAIX,IAAI,CAACO,OAAL,CAAaI,CAAb,EAAgBE,KAAhB,KAA0BJ,UAA9B,EAA0C;AACxCC,UAAAA,kBAAkB,GAAGV,IAAI,CAACO,OAAL,CAAaI,CAAb,CAArB;AACA;AACD;AACF;;AACD,aAAOD,kBAAP;AACD,KATa,CAAd;AAUAJ,IAAAA,IAAI,CAACQ,cAAL,GAAsBR,IAAI,CAACS,WAAL,IAAoBT,IAAI,CAACU,WAA/C;AACA,WAAOV,IAAI,CAACS,WAAZ;AACA,WAAOT,IAAI,CAACU,WAAZ;AACA,2CACKV,IADL;AACWC,MAAAA;AADX;AAGD,GAjBa,CAAd;AAkBA,SAAO;AACLU,IAAAA,IAAI,EAAEnB,gBADD;AAELG,IAAAA;AAFK,GAAP;AAID","sourcesContent":["export const SET_LIBRARY_DATA = 'SET_LIBRARY_DATA';\r\n\r\nexport function setLibraryData (data) {\r\n  let payload = [].concat(data.books, data.magazines).map((item) => {\r\n    let authors = item.authors.split(',').map((authorMail) => {\r\n      let currentAuthorsData = {};\r\n      for (let i = 0; i < data.authors.length; i++) {\r\n        if (data.authors[i].email === authorMail) {\r\n          currentAuthorsData = data.authors[i];\r\n          break;\r\n        }\r\n      }\r\n      return currentAuthorsData;\r\n    })\r\n    item.additionalData = item.description || item.publishedAt;\r\n    delete item.description;\r\n    delete item.publishedAt;\r\n    return {\r\n      ...item, authors\r\n    }\r\n  });\r\n  return {\r\n    type: SET_LIBRARY_DATA,\r\n    payload\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}