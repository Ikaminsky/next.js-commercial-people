{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { BOOK } from \"../../src/components/Library/config\";\nconst DESCRIPTION = 'description';\nconst PUBLISHED_AT = 'publishedAt';\nexport const SET_LIBRARY_DATA = 'SET_LIBRARY_DATA';\nexport const ADD_NEW_DATA = 'ADD_NEW_DATA';\nexport function setLibraryData(data) {\n  const payload = {\n    fullData: [],\n    magazines: data.magazines,\n    books: data.books\n  };\n  payload.fullData = [].concat(data.books, data.magazines).map(item => {\n    // join books and magazines to 1 array of objects\n    const newItem = Object.assign({}, item);\n    const authors = newItem.authors.split(',').map(authorMail => {\n      // get authors by book/magazine author mail\n      let currentAuthorsData = {};\n\n      for (let i = 0; i < data.authors.length; i++) {\n        if (data.authors[i].email === authorMail) {\n          currentAuthorsData = data.authors[i];\n          break;\n        }\n      }\n\n      return currentAuthorsData;\n    });\n    newItem.additionalData = {\n      // replace @description or @publishedAt with .additionalData\n      type: newItem.description ? DESCRIPTION : PUBLISHED_AT,\n      value: newItem.description || newItem.publishedAt\n    };\n    delete newItem.description;\n    delete newItem.publishedAt;\n    return _objectSpread(_objectSpread({}, newItem), {}, {\n      authors\n    });\n  });\n  return {\n    type: SET_LIBRARY_DATA,\n    payload\n  };\n}\nexport function addNewData(data, additionType) {\n  const authorsString = data.authors.replace(/\\s/g, '');\n  const authorsList = authorsString.split(',').map(item => ({\n    email: item,\n    firstname: item,\n    lastname: ''\n  }));\n  const additionTypeKey = additionType === BOOK ? DESCRIPTION : PUBLISHED_AT;\n  const payload = {\n    newFullDataItem: {\n      title: data.title,\n      isbn: data.isbn,\n      additionalData: {\n        type: additionTypeKey,\n        value: data.description || data.publishedAt\n      },\n      authors: authorsList\n    },\n    newAddition: {\n      type: additionType,\n      data: {\n        title: data.title,\n        isbn: data.isbn,\n        [additionTypeKey]: data.description || data.publishedAt,\n        authors: authorsString\n      }\n    }\n  };\n  return {\n    type: ADD_NEW_DATA,\n    payload\n  };\n}","map":{"version":3,"sources":["D:/Work/Andersen/Test/frontend_test_ik-master/src/actions/library.js"],"names":["BOOK","DESCRIPTION","PUBLISHED_AT","SET_LIBRARY_DATA","ADD_NEW_DATA","setLibraryData","data","payload","fullData","magazines","books","concat","map","item","newItem","Object","assign","authors","split","authorMail","currentAuthorsData","i","length","email","additionalData","type","description","value","publishedAt","addNewData","additionType","authorsString","replace","authorsList","firstname","lastname","additionTypeKey","newFullDataItem","title","isbn","newAddition"],"mappings":"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","sourcesContent":["import { BOOK } from '../../src/components/Library/config'\r\n\r\nconst DESCRIPTION = 'description'\r\nconst PUBLISHED_AT = 'publishedAt'\r\n\r\nexport const SET_LIBRARY_DATA = 'SET_LIBRARY_DATA'\r\nexport const ADD_NEW_DATA = 'ADD_NEW_DATA'\r\n\r\nexport function setLibraryData (data) {\r\n  const payload = {\r\n    fullData: [],\r\n    magazines: data.magazines,\r\n    books: data.books\r\n  }\r\n  payload.fullData = [].concat(data.books, data.magazines).map((item) => { // join books and magazines to 1 array of objects\r\n    const newItem = Object.assign({}, item)\r\n    const authors = newItem.authors.split(',').map((authorMail) => { // get authors by book/magazine author mail\r\n      let currentAuthorsData = {}\r\n      for (let i = 0; i < data.authors.length; i++) {\r\n        if (data.authors[i].email === authorMail) {\r\n          currentAuthorsData = data.authors[i]\r\n          break\r\n        }\r\n      }\r\n      return currentAuthorsData\r\n    })\r\n    newItem.additionalData = { // replace @description or @publishedAt with .additionalData\r\n      type: newItem.description ? DESCRIPTION : PUBLISHED_AT,\r\n      value: newItem.description || newItem.publishedAt\r\n    }\r\n    delete newItem.description\r\n    delete newItem.publishedAt\r\n    return {\r\n      ...newItem, authors\r\n    }\r\n  })\r\n  return {\r\n    type: SET_LIBRARY_DATA,\r\n    payload\r\n  }\r\n}\r\n\r\nexport function addNewData (data, additionType) {\r\n  const authorsString = data.authors.replace(/\\s/g, '');\r\n  const authorsList = authorsString.split(',').map(item => (\r\n    { email: item, firstname: item, lastname: '' }\r\n  ))\r\n  const additionTypeKey = additionType === BOOK ? DESCRIPTION : PUBLISHED_AT\r\n  const payload = {\r\n    newFullDataItem: {\r\n      title: data.title,\r\n      isbn: data.isbn,\r\n      additionalData: {\r\n        type: additionTypeKey,\r\n        value: data.description || data.publishedAt\r\n      },\r\n      authors: authorsList\r\n    },\r\n    newAddition: {\r\n      type: additionType,\r\n      data: {\r\n        title: data.title,\r\n        isbn: data.isbn,\r\n        [additionTypeKey]: data.description || data.publishedAt,\r\n        authors: authorsString\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    type: ADD_NEW_DATA,\r\n    payload\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}