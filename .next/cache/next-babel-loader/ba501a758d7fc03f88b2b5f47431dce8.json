{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const SET_LIBRARY_DATA = 'SET_LIBRARY_DATA';\nexport function setLibraryData(data) {\n  const payload = {\n    fullData: [],\n    magazines: data.magazines,\n    books: data.books\n  };\n  payload.fullData = [].concat(data.books, data.magazines).map(item => {\n    // join books and magazines to 1 array of objects\n    let newItem = Object.assign({}, item);\n    const authors = newItem.authors.split(',').map(authorMail => {\n      // get authors by book/magazine author mail\n      let currentAuthorsData = {};\n\n      for (let i = 0; i < data.authors.length; i++) {\n        if (data.authors[i].email === authorMail) {\n          currentAuthorsData = data.authors[i];\n          break;\n        }\n      }\n\n      return currentAuthorsData;\n    });\n    newItem.additionalData = {\n      // replace @description or @publishedAt with .additionalData\n      type: newItem.description ? 'description' : 'publishedAt',\n      value: newItem.description || newItem.publishedAt\n    };\n    delete newItem.description;\n    delete newItem.publishedAt;\n    return _objectSpread(_objectSpread({}, newItem), {}, {\n      authors\n    });\n  });\n  return {\n    type: SET_LIBRARY_DATA,\n    payload\n  };\n}","map":{"version":3,"sources":["D:/Work/Andersen/Test/frontend_test_ik-master/src/actions/library.js"],"names":["SET_LIBRARY_DATA","setLibraryData","data","payload","fullData","magazines","books","concat","map","item","newItem","Object","assign","authors","split","authorMail","currentAuthorsData","i","length","email","additionalData","type","description","value","publishedAt"],"mappings":";;;;;;AAAA,OAAO,MAAMA,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,SAASC,cAAT,CAAyBC,IAAzB,EAA+B;AACpC,QAAMC,OAAO,GAAG;AACdC,IAAAA,QAAQ,EAAE,EADI;AAEdC,IAAAA,SAAS,EAAEH,IAAI,CAACG,SAFF;AAGdC,IAAAA,KAAK,EAAEJ,IAAI,CAACI;AAHE,GAAhB;AAKAH,EAAAA,OAAO,CAACC,QAAR,GAAmB,GAAGG,MAAH,CAAUL,IAAI,CAACI,KAAf,EAAsBJ,IAAI,CAACG,SAA3B,EAAsCG,GAAtC,CAA2CC,IAAD,IAAU;AAAE;AACvE,QAAIC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,IAAlB,CAAd;AACA,UAAMI,OAAO,GAAGH,OAAO,CAACG,OAAR,CAAgBC,KAAhB,CAAsB,GAAtB,EAA2BN,GAA3B,CAAgCO,UAAD,IAAgB;AAAE;AAC/D,UAAIC,kBAAkB,GAAG,EAAzB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,IAAI,CAACW,OAAL,CAAaK,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,YAAIf,IAAI,CAACW,OAAL,CAAaI,CAAb,EAAgBE,KAAhB,KAA0BJ,UAA9B,EAA0C;AACxCC,UAAAA,kBAAkB,GAAGd,IAAI,CAACW,OAAL,CAAaI,CAAb,CAArB;AACA;AACD;AACF;;AACD,aAAOD,kBAAP;AACD,KATe,CAAhB;AAUAN,IAAAA,OAAO,CAACU,cAAR,GAAyB;AAAE;AACzBC,MAAAA,IAAI,EAAEX,OAAO,CAACY,WAAR,GAAsB,aAAtB,GAAsC,aADrB;AAEvBC,MAAAA,KAAK,EAAEb,OAAO,CAACY,WAAR,IAAuBZ,OAAO,CAACc;AAFf,KAAzB;AAIA,WAAOd,OAAO,CAACY,WAAf;AACA,WAAOZ,OAAO,CAACc,WAAf;AACA,2CACKd,OADL;AACcG,MAAAA;AADd;AAGD,GArBkB,CAAnB;AAsBA,SAAO;AACLQ,IAAAA,IAAI,EAAErB,gBADD;AAELG,IAAAA;AAFK,GAAP;AAID","sourcesContent":["export const SET_LIBRARY_DATA = 'SET_LIBRARY_DATA'\r\n\r\nexport function setLibraryData (data) {\r\n  const payload = {\r\n    fullData: [],\r\n    magazines: data.magazines,\r\n    books: data.books\r\n  }\r\n  payload.fullData = [].concat(data.books, data.magazines).map((item) => { // join books and magazines to 1 array of objects\r\n    let newItem = Object.assign({}, item)\r\n    const authors = newItem.authors.split(',').map((authorMail) => { // get authors by book/magazine author mail\r\n      let currentAuthorsData = {}\r\n      for (let i = 0; i < data.authors.length; i++) {\r\n        if (data.authors[i].email === authorMail) {\r\n          currentAuthorsData = data.authors[i]\r\n          break\r\n        }\r\n      }\r\n      return currentAuthorsData\r\n    })\r\n    newItem.additionalData = { // replace @description or @publishedAt with .additionalData\r\n      type: newItem.description ? 'description' : 'publishedAt',\r\n      value: newItem.description || newItem.publishedAt\r\n    }\r\n    delete newItem.description\r\n    delete newItem.publishedAt\r\n    return {\r\n      ...newItem, authors\r\n    }\r\n  })\r\n  return {\r\n    type: SET_LIBRARY_DATA,\r\n    payload\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}