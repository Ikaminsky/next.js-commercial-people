{"ast":null,"code":"import Immutable from 'immutable';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport config from \"../config\";\nimport rootReducer from \"../reducers\";\n\nfunction createMiddlewares({\n  isServer\n}) {\n  const middlewares = [thunkMiddleware];\n\n  if (config.env === 'development' && false) {\n    middlewares.push(createLogger({\n      level: 'info',\n      collapsed: true,\n      stateTransformer: state => {\n        const newState = {};\n\n        for (const i of Object.keys(state)) {\n          if (Immutable.Iterable.isIterable(state[i])) {\n            newState[i] = state[i].toJS();\n          } else {\n            newState[i] = state[i];\n          }\n        }\n\n        return newState;\n      }\n    }));\n  }\n\n  return middlewares;\n}\n\nfunction immutableChildren(obj) {\n  const state = {};\n  Object.keys(obj).forEach(key => {\n    state[key] = Immutable.fromJS(obj[key]);\n  });\n  return state;\n}\n\nexport default ((initialState = {}, context) => {\n  const {\n    isServer\n  } = context;\n  const middlewares = createMiddlewares({\n    isServer\n  });\n  const state = immutableChildren(initialState);\n  return createStore(rootReducer, state, compose(applyMiddleware(...middlewares)));\n});","map":{"version":3,"sources":["/Users/ilyakaminsky/Downloads/frontend_test_ik-master/src/store/createStore.js"],"names":["Immutable","thunkMiddleware","createLogger","createStore","applyMiddleware","compose","config","rootReducer","createMiddlewares","isServer","middlewares","env","push","level","collapsed","stateTransformer","state","newState","i","Object","keys","Iterable","isIterable","toJS","immutableChildren","obj","forEach","key","fromJS","initialState","context"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AAEA,OAAOC,MAAP;AACA,OAAOC,WAAP;;AAEA,SAASC,iBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAA0C;AACxC,QAAMC,WAAW,GAAG,CAClBT,eADkB,CAApB;;AAIA,MAAIK,MAAM,CAACK,GAAP,KAAe,aAAf,SAAJ,EAAmE;AACjED,IAAAA,WAAW,CAACE,IAAZ,CAAiBV,YAAY,CAAC;AAC5BW,MAAAA,KAAK,EAAE,MADqB;AAE5BC,MAAAA,SAAS,EAAE,IAFiB;AAG5BC,MAAAA,gBAAgB,EAAGC,KAAD,IAAW;AAC3B,cAAMC,QAAQ,GAAG,EAAjB;;AAEA,aAAK,MAAMC,CAAX,IAAgBC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,CAAhB,EAAoC;AAClC,cAAIhB,SAAS,CAACqB,QAAV,CAAmBC,UAAnB,CAA8BN,KAAK,CAACE,CAAD,CAAnC,CAAJ,EAA6C;AAC3CD,YAAAA,QAAQ,CAACC,CAAD,CAAR,GAAcF,KAAK,CAACE,CAAD,CAAL,CAASK,IAAT,EAAd;AACD,WAFD,MAEO;AACLN,YAAAA,QAAQ,CAACC,CAAD,CAAR,GAAcF,KAAK,CAACE,CAAD,CAAnB;AACD;AACF;;AAED,eAAOD,QAAP;AACD;AAf2B,KAAD,CAA7B;AAiBD;;AAED,SAAOP,WAAP;AACD;;AAED,SAASc,iBAAT,CAA4BC,GAA5B,EAAiC;AAC/B,QAAMT,KAAK,GAAG,EAAd;AACAG,EAAAA,MAAM,CAACC,IAAP,CAAYK,GAAZ,EAAiBC,OAAjB,CAA0BC,GAAD,IAAS;AAChCX,IAAAA,KAAK,CAACW,GAAD,CAAL,GAAa3B,SAAS,CAAC4B,MAAV,CAAiBH,GAAG,CAACE,GAAD,CAApB,CAAb;AACD,GAFD;AAGA,SAAOX,KAAP;AACD;;AAED,gBAAe,CAACa,YAAY,GAAG,EAAhB,EAAoBC,OAApB,KAAgC;AAC7C,QAAM;AAAErB,IAAAA;AAAF,MAAeqB,OAArB;AACA,QAAMpB,WAAW,GAAGF,iBAAiB,CAAC;AAAEC,IAAAA;AAAF,GAAD,CAArC;AACA,QAAMO,KAAK,GAAGQ,iBAAiB,CAACK,YAAD,CAA/B;AAEA,SAAO1B,WAAW,CAChBI,WADgB,EAEhBS,KAFgB,EAGhBX,OAAO,CAACD,eAAe,CAAC,GAAGM,WAAJ,CAAhB,CAHS,CAAlB;AAKD,CAVD","sourcesContent":["import Immutable from 'immutable'\nimport thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport { createStore, applyMiddleware, compose } from 'redux'\n\nimport config from 'config'\nimport rootReducer from '../reducers'\n\nfunction createMiddlewares ({ isServer }) {\n  const middlewares = [\n    thunkMiddleware\n  ]\n\n  if (config.env === 'development' && typeof window !== 'undefined') {\n    middlewares.push(createLogger({\n      level: 'info',\n      collapsed: true,\n      stateTransformer: (state) => {\n        const newState = {}\n\n        for (const i of Object.keys(state)) {\n          if (Immutable.Iterable.isIterable(state[i])) {\n            newState[i] = state[i].toJS()\n          } else {\n            newState[i] = state[i]\n          }\n        }\n\n        return newState\n      }\n    }))\n  }\n\n  return middlewares\n}\n\nfunction immutableChildren (obj) {\n  const state = {}\n  Object.keys(obj).forEach((key) => {\n    state[key] = Immutable.fromJS(obj[key])\n  })\n  return state\n}\n\nexport default (initialState = {}, context) => {\n  const { isServer } = context\n  const middlewares = createMiddlewares({ isServer })\n  const state = immutableChildren(initialState)\n\n  return createStore(\n    rootReducer,\n    state,\n    compose(applyMiddleware(...middlewares))\n  )\n}\n"]},"metadata":{},"sourceType":"module"}